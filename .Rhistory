?carData::Adler
##### RENAME df! ####
cars_dataset <- read.csv("Data/mtcars.csv")
##### RENAME df! ####
cars_dataset <- read.csv("Data/mtcars.csv")
#### EXERCISE 2B (optional) ####
# Why can't we just run the following to import the data?  What does it do?
read.csv("Data/mtcars.csv")
##### RENAME df! ####
cars_dataset <- read.csv("Data/mtcars.csv")
#### EXERCISE 2B (optional) ####
# Why can't we just run the following to import the data?  What does it do?
read.csv("Data/mtcars.csv")
#### PEEKING ####
head(cars_dataset)
tail(cars_dataset)
View(cars_dataset)
cars_dataset[3,]
cars_dataset[,4]
cars_dataset[3,4]
cars_dataset[c(1,4,6),]
cars_dataset$cyl
cars_dataset$disp[16]
cars_dataset[16,]$disp
cars_dataset[, c("mpg", "disp")]
cars_dataset[-4,]
cars_dataset[,-c(1,5)]
cars_dataset <- read.csv("Data/mtcars.csv")
summary(cars_dataset)
sd(cars_dataset$mpg)
apply(cars_dataset, 2, sd)
0/0
1/0
test_data <- c("1", "2")
sd(test_data)
test_data <- c("car", "bus")
sd(test_data)
cars_dataset
df.no.names <- df[,-1] #Remove first column
cars_dataset.no.names <- cars_dataset[,-1] #Remove first column
apply(cars_dataset.no.names, 2, sd)
cars_dataset$hp.per.cyl <- cars_dataset$hp/cars_dataset$cyl
#### VISUALISATION ####
# Simple plots help us to diagnose problems with our data
plot(cars_dataset$disp, cars_dataset$hp)
heights <- c(1.56, 1.62, 1.8, 1.75)
weights <- c(52, 65, 80, 78) #The values from sheet 1
plot(weights, heights)
plot(cars_dataset$disp, cars_dataset$hp, col="red") #Makes the points red
plot(cars_dataset$disp, cars_dataset$hp, col="blue", type="b", pch = 3, lty = 2, lwd = 1.5,
xlab = "Displacement", ylab = 'Gross horsepower', main = "mtcars plot")
#### EXERCISE 8A (optional, trickier) ####
# The lines in the plot above create a jumbled mess.  What's determining the order in which the
# lines are drawn?  (Hint: try plotting the second and third points with
plot(cars_dataset$disp[2:3], cars_dataset$hp[2:3], type="b")
# and then add the fourth using
plot(cars_dataset$disp[2:4], cars_dataset$hp[2:4], type="b")
# What about other types of plot?
#### EXERCISE 10 ####
# Run each of the following lines of code.  Underneath each, write a comment saying what it
# does.
boxplot(cars_dataset$mpg, main = "Plot (a)", ylab= "MPG")
# (a)
boxplot(cars_dataset$drat, cars_dataset$wt, ylab = "Value", names = c("Displacement", "Weight"),
main = "Plot (b)")
# (b)
hist(cars_dataset$disp, main = "Plot (c)", xlab= "Displacement")
# Bar charts are a little harder.  Suppose we wanted to make a bar chart of the values of "gear".
# If you try
barplot(cars_dataset$gear)
# you'll notice it doesn't do what you want.  That's because the input to barplot has to be the
# heights of the bars - that is the number of values of each type.  To do this we use
(gear.tab <- table(cars_dataset$gear))
barplot(gear.tab, xlab = "Number of gears", ylab = "Frequency")
# We can also plot the line of best fit using the function "abline", which is a whole separate
# line of code after the one for the plot.  It will add the line of best fit to whatever plot
# you made most recently, even if it was a completely different plot!  So we want to run:
plot(cars_dataset$drat, cars_dataset$hp, xlab="Rear axle ratio", ylab = "Horsepower")
# You can fit a linear model using the function "lm", and the symbol "~" (Shift+# on Windows;
# Shift+` [the key to the left of Z] on Mac):
mod.1 <- lm(cars_dataset$hp~cars_dataset$drat)
mod.2 <- lm(hp~drat, data = cars_dataset)
# There are two simple things we can do with a linear model, starting with
summary(mod.1)
# We can also plot the line of best fit using the function "abline", which is a whole separate
# line of code after the one for the plot.  It will add the line of best fit to whatever plot
# you made most recently, even if it was a completely different plot!  So we want to run:
plot(cars_dataset$drat, cars_dataset$hp, xlab="Rear axle ratio", ylab = "Horsepower")
abline(mod.1, col = "red", lty = 2, lwd= 5)
sum(1:10)
1:10 %>% sum
1:10 %>% sum()
# Load a package
library(tidyverse)
sum(1:10)
1:10 %>% sum
1:10*((1:10) + 1)/2
lapply(1:10, function(x) x*(x+1)/2)
sapply(1:10, function(x) x*(x+1)/2)
1:10*((1:10) + 1)/2
cars_tib <- read_csv("Data/mtcars.csv")
head(cars_tib)
cars_tib <- "Data/mtcars.csv" %>% read_csv
# Load a package
library(tidyverse)
sum(1:10)
1:10 %>% sum
my.iris <- iris
my.iris.num <- my.iris[,-5] #Get rid of the species column
round(mean(apply(my.iris.num, 2, sd)), digits=2)
my.iris.num %>% apply(2, sd) %>% mean %>% round(digits=2)
# especially so when written on separate lines like so
my.iris.num %>%
apply(2, sd) %>%
mean %>%
round(digits=2)
val <- my.iris.num %>% apply(2, sd) %>% mean %>% round(digits=2)
my.iris.num %>%
apply(2, sd) %>%
mean %>%
round(digits=2) -> val
cars_tib <- read_csv("Data/mtcars.csv")
head(cars_tib)
cars_tib <- "Data/mtcars.csv" %>% read_csv
cars_tib %>% head
cars_tib[3,4]
cars_tib[c(1,4,6),]
cars_tib[,-c(1,5)]
cars_tib %>% select(cyl)
cars_tib %>% select(mpg, disp)
select(cars_tib, cyl)
select(cars_tib, mpg, disp)
cars_no_name <- cars_tib %>% select(!Car) #Remove the car column
head(cars_no_name)
#### EXERCISE 13 ####
# Run the following code.  In a comment after each pair of lines, write what the code does.
cars_starts_d <- cars_tib %>% select(starts_with("d"))
head(cars_starts_d)
cars_contains_p <- cars_tib %>% select(contains("p"))
head(cars_contains_p)
#### EXERCISE 14 ####
# Check that these do what you'd expect.  (There's no need to write anything!)  Compare with
# the code on Sheet 2.  Which method do you prefer?
cars_tib %>% filter(gear == 4)
cars_tib %>% filter(mpg < 15)
cars_tib %>% filter(carb >= 6)
cars_tib %>% filter(am != 1)
cars_tib %>% filter(str_detect(Car, "^Merc"))
# For "ends with 0", say, you use 'str_detect(Car, "0$")' instead
cars_tib %>% filter(Car >= "T")
cars_tib %>% summary
cars_tib %>% summarise(sd(mpg))
cars_tib %>% select(!Car) %>% summarise(across(everything(),sd)) #(*)
apply(cars_tib[,-1], 2, sd)
cars_tib <- cars_tib %>% mutate(hp_per_cyl = hp/cyl)
plot1 <- ggplot(data = cars_tib, aes(x=disp, y=hp))
plot1 + geom_point()
plot1 <- plot1 + geom_point()
(plot1 <- plot1 + geom_point())
plot2 <- ggplot(data = cars_tib, aes(x=disp, y=hp))
(plot2 <- plot2 + geom_point(aes(colour="red")))
(plot2 <- plot2 + geom_point(colour="red"))
plot2 <- ggplot(data = cars_tib, aes(x=disp, y=hp))
(plot2 <- plot2 + geom_point(colour="red"))
(plot3 <- ggplot(data = cars_tib, aes(x=disp, y=hp)) +
geom_point() + geom_path() + #Add points, then lines
labs(x = "Displacement", y= "Gross horsepower", title = "mtcars plot"))
(plot3 <- ggplot(data = cars_tib, aes(x=disp, y=hp)) +
geom_line() + #Add points, then lines
labs(x = "Displacement", y= "Gross horsepower", title = "mtcars plot"))
cars_tib %>% select(!Car)
cars_tib %>% select(-Car)
?select
?df
mtcars
read.csv("Data/mtcars.csv")
cars_dataset = read.csv("Data/mtcars.csv")
cars_dataset$Car
cars_dataset$Car >= "T"
cars_dataset[cars_dataset$Car >= "T", ]
"A" > "C"
"Z" > "C"
?mtcars
